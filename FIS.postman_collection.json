{
	"info": {
		"_postman_id": "7bb83739-69d0-44ef-a454-3886d5ebc227",
		"name": "FIS",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Get https://jsonplaceholder.typicode.com/posts",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response body must have valid keys\", function () {\r",
							"  var data = JSON.parse(responseBody);\r",
							"  data.forEach(function(item) {\r",
							"      pm.expect(item).to.have.all.keys('userId', 'id', 'title', \r",
							"      'body'); \r",
							"  });\r",
							"\r",
							"});\r",
							"\r",
							"const schema = {\r",
							"\"data\": \"object\",\r",
							"\"properties\": {\r",
							"    \"userId\": { \"type\":\"integer\"},\r",
							"    \"id\": { \"type\":\"integer\"},\r",
							"    \"title\": { \"type\":\"string\"},\r",
							"    \"body\": { \"type\":\"string\"},\r",
							"}\r",
							"};\r",
							"\r",
							"pm.test(\"Validate schema\", () => {\r",
							"    pm.response.to.have.jsonSchema(schema);\r",
							"})\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://jsonplaceholder.typicode.com/posts",
					"protocol": "https",
					"host": [
						"jsonplaceholder",
						"typicode",
						"com"
					],
					"path": [
						"posts"
					]
				}
			},
			"response": []
		},
		{
			"name": "GET https://jsonplaceholder.typicode.com/posts/1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"All Value exist and print userId\", () => {\r",
							"  const responseJson = pm.response.json();\r",
							"  pm.expect(responseJson.userId).to.eql(1);\r",
							"  pm.expect(responseJson.id).to.eql(1);\r",
							"  pm.expect(responseJson.title).to.eql(\"sunt aut facere repellat provident occaecati excepturi optio reprehenderit\");\r",
							"  pm.expect(responseJson.body).to.eql(\"quia et suscipit\\nsuscipit recusandae consequuntur expedita et cum\\nreprehenderit molestiae ut ut quas totam\\nnostrum rerum est autem sunt rem eveniet architecto\");\r",
							"\r",
							"  console.log(pm.collectionVariables.get(\"userId\"));\r",
							"console.log(pm.response.json().userId);\r",
							"});\r",
							"\r",
							"const schema = {\r",
							"\"type\": \"object\",\r",
							"\"properties\": {\r",
							"    \"userId\": { \"type\":\"integer\"},\r",
							"    \"id\": { \"type\":\"integer\"},\r",
							"    \"title\": { \"type\":\"string\"},\r",
							"    \"body\": { \"type\":\"string\"},\r",
							"}\r",
							"};\r",
							"\r",
							"pm.test(\"Validate schema\", () => {\r",
							"    pm.response.to.have.jsonSchema(schema);\r",
							"})\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://jsonplaceholder.typicode.com/posts/1",
					"protocol": "https",
					"host": [
						"jsonplaceholder",
						"typicode",
						"com"
					],
					"path": [
						"posts",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "https://jsonplaceholder.typicode.com/posts",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test(\"Value is in valid list\", () => {\r",
							"  pm.expect(pm.response.text()).to.include(\"id\");\r",
							"});\r",
							"\r",
							"const schema = {\r",
							"\"type\": \"object\",\r",
							"\"properties\": {\r",
							"    \"id\": { \"type\":\"integer\"},\r",
							"}\r",
							"};\r",
							"\r",
							"pm.test(\"Validate schema\", () => {\r",
							"    pm.response.to.have.jsonSchema(schema);\r",
							"})\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "https://jsonplaceholder.typicode.com/posts",
					"protocol": "https",
					"host": [
						"jsonplaceholder",
						"typicode",
						"com"
					],
					"path": [
						"posts"
					]
				}
			},
			"response": []
		},
		{
			"name": "Negative Test https://jsonplaceholder.typicode.com/posts/idontexist",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://jsonplaceholder.typicode.com/posts/idontexist",
					"protocol": "https",
					"host": [
						"jsonplaceholder",
						"typicode",
						"com"
					],
					"path": [
						"posts",
						"idontexist"
					]
				}
			},
			"response": []
		},
		{
			"name": "https://jsonplaceholder.typicode.com/posts/1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Confirm response is empty\", function () {\r",
							"pm.expect(pm.response.text()).to.include(\"\");\r",
							"});\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "https://jsonplaceholder.typicode.com/posts/1",
					"protocol": "https",
					"host": [
						"jsonplaceholder",
						"typicode",
						"com"
					],
					"path": [
						"posts",
						"1"
					]
				}
			},
			"response": []
		}
	]
}